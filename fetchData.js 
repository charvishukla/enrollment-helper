/**
 * File: fetchData.js
 * Date: 08/20/2022
 * Author: Charvi Shukla
 * Converts data stored in the form of HTML into a JS object, and subsequently 
 * into a JSON object 
 */
const {
    table
} = require("console");
const fs = require("fs");
const { get } = require("https");
const jsdom = require("jsdom");
const {
    JSDOM
} = jsdom;

const PATH_TO_CATALOG_HTML = "alltables.html";

/**
 * This function reads a given HTML document and creates a DOM for it. Since the 
 * HTML document only contains tables, we call the result "tables."
 * @returns an array of HTML tables.
 */
function getTablesFromFile() {
    const data = fs.readFileSync(PATH_TO_CATALOG_HTML, {
        encoding: "utf-8"
    });
    const dom = new JSDOM(data);
    const tables = dom.window.document.getElementsByTagName("table");
    return tables;
}

/**
 * fetches the tables from the HTML file and converst HTML data to the JSON format.
 */
function main() {
    let tables = getTablesFromFile();
    let json = tablesToSubjects(tables);
    fs.writeFileSync("catalog.json", JSON.stringify(json));
}

/**
 * @param tables of course data. Tables is an array of multiple HTML tables. This 
 * method traverses through each table and extracts the HTML data contained within 
 * each table. 
 * The extracted data is pushed into an array and that array is then used to 
 * populate a JavaScript object.
 * @returns JavaScript object for each subject [i.e. the ENTIRE catalog].
 */
function tablesToSubjects(tables) {
    let subjectArr = [];
    for (let i = 0; i < tables.length; i++) {
        let subjectJSON = buildIndividualSubjectJSON(tables.item(i));
        subjectArr.push(subjectJSON);
    }
    return {
        subject: subjectArr,
    };
}


/**
 * @param table is a single table from an array of HTML tables.
 * @returns a javascript object containing course data from a SINGLE table.
 * The object contains all the courses offered in one subject/department.
 */
function buildIndividualSubjectJSON(table) {
    // gets the list of all subjects aka departments 
    let subjectName = table.querySelector("span.centeralign").innerHTML.trim();

    return {
        subject: subjectName,
        classInfo: getCourseTitle(table),
        discussionInfo: getSectionData(table)
    }
}

/**
 * 
 * @param table 
 * @returns 
 */
function getCourseTitle(table) {
    let courseName = [];
    let courseNumber = [];
    let numUnits = [];

    let tr = Array.from(table.querySelectorAll("tr:not([class])"));
    for (let i = 4; i < tr.length; i++) {
        let cols = Array.from(tr[i].querySelectorAll("td.crsheader"));
        if(cols.length === 4 ){
        // getting course Number
        courseNumber.push(cols[1].innerHTML);
        // getting name of the course 
        courseName.push(cols[2].querySelector("span.boldtxt").innerHTML.trim());
        // getting number of units
        let txt = cols[2].innerHTML;
        let removeWhitespace = txt.replace(/(?:\s)/g, "");
        let idx = removeWhitespace.search(/<\/a>\([^)]*\)<br>/);
        let units = removeWhitespace.substring(idx + 5, removeWhitespace.length - 5);
        numUnits.push(units);
        }
    }
    let jsonArr = [];
   for (let i = 0; i < courseName.length; i++) {
    jsonArr.push({
        courseID: courseNumber[i], 
        courseUnits: numUnits[i],
        courseName: courseName[i]
    })
   }
   return jsonArr;

}


function getLectureInfo(table) {
    let 
    
}




/**
 * 
 * @param table 
 * @returns 
 */
function getSectionData(table) {
    // arrays to categorize different kinds of data 
    let typ = [];
    let secID = [];
    let secTiming = [];
    let secDays = [];
    let secBuilding = [];
    let secRoom = [];

    let data = table.querySelectorAll("tr.sectxt"); // selecting a row
    let arr = Array.from(data); // nodelist --> array
    for (let i = 0; i < arr.length; i++) {
        // columns from each row are saved in an array.
        let columns = Array.from(arr[i].querySelectorAll("td.brdr")); 
        // predicate to find if the row contains discussion information.
        let instructionType = columns[3].innerHTML; 
        if (instructionType === '<span id="insTyp" title="Discussion">DI</span>') {
            // cancelled Discussions have less than 13 columns.
            if(columns.length !== 13){
                typ.push("course cancelled");
                secID.push("course cancelled");
                secDays.push("course cancelled");
                secTiming.push("course cancelled");
                secBuilding.push("course cancelled");
                secRoom.push("course cancelled");
            } else {
                typ.push("DI");
                secID.push(columns[4].innerHTML);
                secDays.push(columns[5].innerHTML.trim());
                secTiming.push(columns[6].innerHTML);
                secBuilding.push(columns[7].innerHTML.trim());
                secRoom.push(columns[8].innerHTML);
            }
        }
        if(instructionType === '<span id="insTyp" title="Laboratory">LA</span>' ){
            if(columns.length !== 13){
                typ.push("course cancelled");
                secID.push("course cancelled");
                secDays.push("course cancelled");
                secTiming.push("course cancelled");
                secBuilding.push("course cancelled");
                secRoom.push("course cancelled");
            } else {
                typ.push("LA");
                secID.push(columns[4].innerHTML);
                secDays.push(columns[5].innerHTML.trim());
                secTiming.push(columns[6].innerHTML);
                secBuilding.push(columns[7].innerHTML.trim());
                secRoom.push(columns[8].innerHTML);
            }
        }
        
        
    }
    var jsonArr = [];
    for (let i = 0; i < secID.length; i++) {
        // storing all json objects in an array. 
        jsonArr.push({
            type: typ[i],
            section: secID[i],
            timing: secTiming[i],
            days: secDays[i],
            building: secBuilding[i],
            room: secRoom[i]
        })
    }
    return jsonArr;
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

// HELPER METHOD 1
function isCourseName(str) {
    if (str === "Prerequisites  " || str === "Resources" ||
        str === '<span title="CAPE - Course and Professor Evaluations">Evaluations</span>' ||
        str === "Prerequisites") {
        return false;
    } else {
        return true;
    }
}



// tb = getTablesFromFile();
// randomtb = tb[0];
// randomtb2 = tb[1];
// randomtb3 = tb[2];
// randomtb4 = tb[3];
// randomtb5 = tb[4];
// randomtb6 = tb[5];
// randomtb7 = tb[6];
// randomtb8 = tb[7];
// randomtb9 = tb[8];
// randomtb10 = tb[9];

// console.log( getCourseTitle(randomtb) )

main();


